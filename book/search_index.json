[
["index.html", "Creating and Preparing Dataset for Analysis in Stata Module 1 About this tutorial", " Creating and Preparing Dataset for Analysis in Stata Sheriff Olasunkanmi 2015-02-22 Module 1 About this tutorial In this tutorial, we will explore how to create and prepare a dataset for statistical analysis in Stata. The tasks we would be doing primarily involve data entry and verification and, despite being somewhat tedious and repetitive, they are essential for ensuring accuracy and fitness of our data for analysis in Stata. This tutorial is offered for students taking POSC 3010 Empirical Methods in Political Science at Memorial University of Newfoundland. I am Sheriff Ola, and I’m a graduate assistant for this course. I will be leading you in this and similar tutorials on working with Stata. What we learn in the various modules can be applied when you are completing your final projects for the course. We will be using Stata version 12 for our lessons. This may seem daunting at first but, hopefully, by the end of the tutorial, you will see how Stata can help you do many of the tasks you need to accomplish prior to, and during, data analysis. Stata is a powerful statistical software package for analyzing data. As a simple tool, it is designed to perform over 70 percent of the tedious task for you during data analysis. Although Stata is primarily a command-driven program (meaning you must type commands into a console to get it to do what you want it to do), it make accommodations for new users to use GUI focused point and click actions. Stata is used extensively in the field of political science along with packages like SAS and SPSS. For myself, although recently I have been growing fond of R - due primarily to it being free, I’m still helplessly attached to Stata, mainly because it is simple to use and provides an intuitive interface for performing many many many statistical procedures. If you are thinking of a quantitatively focused graduate studies or career, I recommend adding Stata to your quantitative/statistics toolbox. This tutorial focuses on using Stata to process and prepare questionnaire data for analysis. If your are interested in a more extensive and accessible introduction to Stata, check out this excellent web resource by Germán Rodríguez at Princeton University. You can also take a look at this resource by Chris Baum at Boston College. However, if you are looking for a more serious and comprehensive introduction to using Stata for your research, I recommend Alan Acock’s A Gentle Introduction to Stata, 4th Edition which served as the main source of reference for this tutorial. This tutorial is part of a series of labs for this course that runs each Tuesday and Friday in the computer lab at the Social Science faculty. As always, I urge every one to attend as what you learn can be helpful to you when completing your final project at the end of the term. The lessons are not offered privately to any student without evidence of a need for special accommodation - often in the form of a medical report and approved by professor Speight. I can be reached at the Graduate Lounge at the Political Science department any weekday from 11am - 1pm. "],
["intro.html", "Module 2 The Main Stata Interface", " Module 2 The Main Stata Interface In order to be able to use Stata to create and analyze datasets, it is necessary to familiarize ourselves with the main GUI. This module provides a brief overview of Stata’s Generic User Interface, i.e, the main screen you confront when you open Stata for the first time. By the end of the module, students: should be familiar with Stata’s main user interface should know many of the common tasks that can be performed with the various GUI functions When you work with Stata, you see a screen interface that looks similar to figure 1.1 below: figure 1.1: Stata User Interface A crucial part of Stata’s GUI is the toolbar which houses a collection of functions displayed as buttons that users can click on to execute various tasks. The toolbar is shown below in figure 1.2: figure 1.2. The Stata Toolbar As a new user, it is critical to familiarize yourself with the main buttons in Stata’s toolbar since these are what you use to communicate commands you would like Stata to execute. Referencing figure 1.2 above, here are brief descriptions of the toolbar buttons in Stata and the tasks they perform: The Open button: This is the button you click on to open and load a file or dataset into Stata The Save button: Used to save datasets in the current memory disk The Print button: Prints the output displayed in the Results window. The Log button: Starts or closes, halts or resumes the current log The Viewer button: Opens the Viewer or brings it to the front of all active windows The Graph button: Opens a graph window or sets it as active window The Do-File Editor button: Opens the Do-File Editor or set it as active window The Data Editor (Edit) button: Opens the Data Editor in Edit mode or set it as the active window The Data Editor (Browse) button: Opens the Data Editor in browse mode or set it as the active window Opens the Variables Manager feature or set it as active window The Clear - more - condition button: Instructs Stata to continue during a long pause in a task execution The Break button: Stops or break the current task execution in Stata. For a more detailed description of the Stata user interface, see Stata’s manual. When you open a file that contains Stata dataset, a list of the variables will show up in the Variables window (see figure 1.1). The Variables window displays the name of a variable and a label created purposefully to help enhance the description of the variable. Related information on the variable will also show up in the Properties window, such as the type of variable it is (i.e float, integer or string) or the format of the variable. For our tutorial, we will focus more on names and labels for variables. When a command is executed in Stata, the results or output is printed on the Results window (see figure 1.1). The commands are also listed in the Review window. When a command listed in the Review window is clicked once, it appears in the Command window (see figure 1.1). If it is double-clicked, the command is executed, and the output, if any, will appear in the Results window. There is often a gray bar at the bottom of the screen that displays the current working directory or folder (see figure 1.1). Depending on how Stata was installed, the working directory may differ from computer to computer. The working directory is where Stata searches for a file or save a file unless the full path to a different directory that contains the file is specified in a command. For instance if a user working on a term project wishes to store all files related to that project in a particular directory, say, C:/term-project, he/she could enter the command “cd C:/term-project.” This command assumes that this directory already exists on your computer. To change the working directory, you can either use the cd command or select File &gt; Change working directory and then select a directory or folder you wish to use. It is recommended as best practice to have a working directory for each project. "],
["creating-a-stata-dataset.html", "Module 3 Creating a Stata Dataset 3.1 Creating a Coding Schema 3.2 Translating our Data set with a coding sheet", " Module 3 Creating a Stata Dataset Before you have a dataset, you must first collect data on a topic of interest. In this module, we will begin creating a dataset by looking at how to extract data we’ve collected in a questionnaire into a structure or format that can be understood and interpreted by Stata. Please note, this module does not teach how to create a questionnaire. It rather shows how to get the data you’ve collected in a questionnaire into a dataset for analysis in Stata. By the end of the module, students should: become familiar with basic requirements for creating a Stata dataset be able to input information from a questionnaire into a grid or table format for use in creating a dataset know the best practices for naming and labeling variables in a dataset Since most of us would be using what we learn in these modules to complete some of the tasks in our term projects, we will use a case study of a fictitious term project to illustrate what we would be exploring. And, since we will be creating the dataset for this module from a questionnaire, here is a sample questionnaire I created to help illustrate most of the ideas and concepts to be treated. The questionnaire is based on a topic investigating Memorial University students’ perceptions about recent tuition hikes by the Government of Newfoundland: Respondent id - A number from 1 to infinity What is your gender - Male - Female - Other, specify - Prefer not to say What is your level of study - Graduate - Undergraduate - Diploma What is your tuition fee status - Canadian/Permanent resident - International student How would you rate the current tuition hikes - Fair - Unfair - I’m not sure How much will the new hikes affect your studies - Very much - Not at all - I’m not sure Which of the following is true about you - I am a self funded student - I have a full or partial scholarship - I prefer not to say The above questionnaire show questions to be posed to respondents on the topic the study seeks to investigate - perceptions of tuition hike by the Government of Newfoundland among Memorial University students. This questionnaire can be converted to a data set structured in a grid or spreadsheet/table format. Many statistical packages like Stata require data that are set in a grid, like a table, with rows and columns. Each row contains data for an observation (which is often a subject or a participant in your study), and each column contains the measurement of some variable of interest about the observation, such as age For some variables, the meaning of the values in the data is obvious. For instance if your variable explore people’s year of birth, then when you see the values, it is clear what they mean. For other variables, the meaning of the values needs to be specified with a value label. There are many questionnaires that explore whether respondents “Strongly agree,” “Agree,” “Disagree,” or “Strongly disagree,” or that ask respondents to answer some question with either a “Yes” or “No.” This sort of data is usually coded as numbers, such as 1 for “Yes” and 2 for “No,” and it can make understanding tables of data much easier if we create value labels to be displayed in the output in addition to (or instead of) the numbers. 3.1 Creating a Coding Schema Software like Stata requires the data we bring into them to be set in a format they understand and can interpret. Doing this means that we must sometimes convert or translate the data from a format that a particular software - in this case Stata - does not recognize to one that it does. In this module we will explore how to take data from our sample questionnaire and create a codebook that can be used in creating a data set that Stata can understand and interpret. Looking at the sample questionnaire we developed earlier, it is clear that nearly all the characters are strings. Hence, in order to be able to get the data we collect in the questionnaire into Stata for our analysis, we must find a way to structure the data into a form that Stata can understand and interpret Doing this is called coding, where we assign special numeric or string characters to questions and answers to enable analysis to be done in Stata. In this module we will convert the answers in our questionnaire above into numeric characters. Doing this means that answers such as those of the first question, i.e, about Gender, can be assigned numeric characters such as Male = 1, Female = 2, Other = 3, Not sure = 4. Doing this, we can assign a number for each possible answer, or a response for each of the items in our questionnaire. We can also assign short variable names for the variable that will contain the data for each item. A rule of thumb for creation of variable names is that we can assign uppercase and lowercase letters, numbers, and underscore character, but the name should have less than 32 characters and contain no spaces. Below is a sample Codebook I created using information from our questionnaire: ID Number Question Variable name Variable label Identification number id record order 1 - nth What is your gender gender Male, Female, Other, Prefer not to say 1, 2, 3, 4 What is your level of study Study_level Graduate, Undergraduate, Diploma 1, 2, 3 What is your tuition fee status fee_status Canadian/Permanent, Resident International 1, 2 How would you rate the current tuition hikes tuition_hike Very Fair, Fair, I’m not sure, Unfair, Very Unfair 1, 2, 3, 4, 5 How much will the new hikes affect your studies effects Very affected, Affected, I’m not sure, Slightly affected, Not affected all, 1, 2, 3, 4, 5 How is your study funded fee_type I am self-funded, Have scholarship, I prefer not to say 1, 2, 3 The codebook above help translate the numeric codes in the data set back into the questions that were asked participants and the answer options they could choose from. Without the codebook, it would be difficult to determine, for instance, that every International Student among our participants, is assigned a 2 in the data set. 3.2 Translating our Data set with a coding sheet From the sample codebook developed in the previous section, and which defines how questions asked in the questionnaire and answers provided by respondents should be structured or represented in a computer readable format, we prepare a coding sheet that would take the data from its current state in the questionnaire and translate it to a computer readable format to be used for analysis in Stata. In this sense, the coding sheet acts as our translator to convert the dataset in the questionnaire to a format that is recognized and understood by Stata. The coding sheet may be created using a spreadsheet application like Microsoft Excel or even a text editor with support for comma delimited files such as Notepad++. However, Stata has a special application for data entry known as the Data Editor (see figure 1.2). It provides an interface that is similar to a spreadsheet, but it has some features that are more suited to creating datasets specifically for use in Stata. Figure 1.3 below shows the interface for Stata’s Data Editor: Figure 1.3. Data Editor In this module, we will be using Stata’s Data Editor to create a coding sheet from the questionnaire above. The Data Editor may be opened in both Edit and Browse modes. Opening in Edit mode allows the editing of data sets. On the other hand, one can simply browse or preview the data set in the Browse mode. To open the Data Editor in Edit mode, click on the icon on the toolbar that looks like a table or spreadsheet with a pencil pointing downward towards the far left corner (see figure 1.4 below). Figure 1.4. Data Editor icon We can start editing as soon as the Data Editor comes up. Just like other spreadsheets, data may be entered directly into the various columns. Let’s enter a data for a fictitious first respondent who answered the first question as Male, the second as graduate, the third as Canadian, fourth as “I am not sure,” the fifth as “not at all” and the sixth as “I’m on scholarship.” To do this: click on the first cell at the top left corner and enter 1 as the value for our respondent’s id. Press the Tab key to move one cell to the right, and enter the value for the respondent’s gender, which again is a 1. Press the Tab key again to move to the next cell on the right and enter 1 again as value for fee status which he answered as Canadian. Make another Tab and in the next cell enter 3 as value for tuition hike. Tab again to the right cell and enter 2 as value for the effects variable. Finally repeat the tabbing process and enter 2 as value for bio which describes him as being on full or partial scholarship. The results of the data entry procedure we just completed may be viewed below. Figure 1.5. After you have entered all the values for a specific respondent, you then press the Enter key, which will move the cursor to the next row on the Data Editor (Edit), and then press the Home key, which will move the cursor to the first column of this row. You can proceed to enter the rest of the data. The Tab key is smart, so after you enter the last value for a specific row of data, pressing Tab will move the cursor to the first column of the next row. However, before doing this it would be good to enter more informative variable names to replace the default names of var1, var2, etc. To change a variable’s name: click anywhere in the column for that variable or click on its name in the Variables pane at the top right of the Data Editor, for example, var1. then in the Properties pane at the lower right of the Data Editor, change Name from var1 to a specific variable name, in our case, id. Remember, the name can be up to 32 characters, but it is standard practice to use short names. Since Stata is case sensitive, it is also best to use lowercase names. By using lowercase names, it will be easy to remember what case to use because the names will all be lowercase. From the Properties pane, we can also change the variable’s label to be “Participant identification” by typing this text in the Label box. After completing these routines for 20 fictitious respondents, our Data Editor (Edit) should look like figure 1.6 below: figure 1.6. Data Editor showing manually typed data The above image shows the Data Editor (Edit) with manually entered variables and values from our questionnaire. But it is possible that the data set in its current state may confuse certain users. To redress this problem, it is necessary to create descriptive labels for some values on most of the variables to help with clarity. We do this in the next module "],
["labeling-values-in-our-dataset.html", "Module 4 Labeling Values in our Dataset", " Module 4 Labeling Values in our Dataset Although it is customary to use Stata’s Data Editor for defining and applying labels, the Variable manager can be a rather useful option for this task. In this module, we will explore how to label values of data set variables, and we will use the Variable manager to accomplish this. By the end of this module, students should: become familiar with basic requirements and or procedures of labeling values of some variables in a data set be able to use Stata’s Variable manager feature to label variable values in a data set The Variable manager feature can be brought up by clicking the spreadsheet icon on Stata’s toolbar, as shown below: Figure 1.7. Variable manager icon We will open the Variables Manager and define a value label for one of the variables in our data set, study_level (which describes respondents level of study, i.e either graduate, undergraduate or diploma). In this activity, we will use the Variables Manager to define the value labels. Let’s start. In the Variable Properties pane, click on the Manage… button next to the Value label field (see figure 1.8). Figure 1.8. Variable manager showing manage property in the Properties pane This will open a new dialog box called Manage value labels (again see figure 1.9 below) Figure 1.9 Manage Value Labels dialog Because we have no value labels yet, nothing is listed. Click on Create label, and the Create label dialog box opens as shown in figure 2.0. Figure 2.0. Create Label dialog For Label name, type Study. Bear in mind that this is not the name of the variable but a sort of sobriquet for the set of labels we will use for the variable. For Value, type 1; press on Tab button to go to Label (you can also click inside the Label box if you don’t want to use Tab, and start typing) and type graduate; and then click Add. Next type 2 under Value; press the Tab button to go to Label and type undergraduate and then click Add. Again, type 3 under value then Tab to Label for the final time and type diploma then click Add. See figure 2.1 for a screen shot of the results: Figure 2.1. Create Label dialog output Figure 2.1 shows the Create Labels dialog box after performing the activities above. Since we have no more values, click on OK to close the Create label dialog box. Doing this adds the label study to the Manage value labels dialog box. Now click on the Close button of the Manage value labels dialog box to return to the Variables Manager. In the Variable Properties pane, we can click on the drop-down menu for Value label and select our label of study. Then click on Apply. You will notice that the value label for study_level is now study in the list of variables on the left. Now using what we have learned so far, let us define more value labels for our data set: click on the Manage… button next to Value label, then click on Create label, which opens the Create label dialog box. Let us make a label sobriquet of Views that we will apply to tuition_hike. This new label is intended to describe respondents’ views of the new tuition hike introduced by the Newfoundland government. For Value, type 1; tab to Label and type Very Unfair; then click on Add. Repeat this step to add the following values and labels for the views value label: values Labels 2 Fair 3 I’m not sure 4 Unfair 5 Very Unfair Let us repeat these steps, starting by clicking on Create Label, and create value labels named status (fee_status), sex (gender), impacts (effects), and funding (fee_type) with the following values and labels: Label name Value Label sex 1 Male 2 Female 3 Other 4 Prefer not to say status 1 canadian/permanent resident 2 international student impacts 1 Very affected 2 Affected 3 Not sure 4 Slightly affected 5 Not affected at all funding 1 Self-funded 2 Scholarship 3 Prefer not to say Once we finish creating the last value label, we then click on Close in the Manage value labels dialog box. This takes us back to the Variables Manager. Here we can click on any variable - for example, gender, then click on the drop-down menu next to Value label and select one of the sobriquets we just created, in this case, sex. Clicking on Apply will assign this set of value labels to the gender variable. We can repeat this for fee_status by selecting status from the drop-down menu. Similarly, we can select impacts for effects, study for study_level, views for tution_hike and finally, funding for fee_type. Finally, let us add a note to our dataset. To do this, bring up the Variable manager if it is not already the active window, and right-click on any of the variables, for example, id. A drop-down menu appears with several useful options including Manage notes for dataset… Click on this option, and we see a dialog box open with an option to add notes. Click on Add and then type These data were collected for my term project for POSC 3010 in March of 2015. Next, click on Submit and then Close to close the dialog box. Dataset notes can be very useful for keeping track of general changes in the dataset. To see how the notes look in the data set, type this command into your Stata Command window: describe. Next, type notes. The output can be seen below: Figure 2.2. Going through a series of dialog boxes can be confusing. Remember however, that if you face any difficulty completing any of these tasks, I am always available to help, both in person and via email (syo837@mun.ca.) "],
["previewing-our-data-set.html", "Module 5 Previewing our data set", " Module 5 Previewing our data set In the previous modules, we manually entered our data with the help of the Data Editor in edit mode. Having finished entering our data, we can now check our work. To do this, we can use the Data Editor in browse mode. A main reason for using the Data Editor in browse mode is to preview data without changing it. By the end of this module, students: should become familiar with some of the main functions and features of the Data Editor (browse) be able to use the Data Editor in browse mode to preview data Open the Data Editor (Browse) by going to the Stata toolbar and clicking on the icon with the spreadsheet and search tool pointing up. (see Figure 2.3 below) Figure 2.3. Data Editor (browse) icon In the Data Editor window that opens, we can see the numeric data where we did not add value labels - that is, for the id variable - but for all the variables to which we assigned value labels, we now see the value label of each respondent, as shown in figure 2.4. Figure 2.4. Previewing our data in Data Editor (Browse) mode can be quite helpful. For example, we can see that respondent 15 has an ID of 15, is male, may be a Canadian citizen or permanent resident, is pursuing undergraduate studies which is self-funded yet he sees his studies as least affected by the new tuition hike and thinks the new hike is fair. By seeing it laid out this way, we are always aware of how each variable was coded. However, if we would like to see just numeric values, we can use the Data Editor (Edit) to do this by typing into the Stata command window the following command: edit, nolabel*. The results can be seen below in Figure 2.5: Figure 2.5. Similarly, should we decide to preview numeric values using the Data Editor (Browse), we can type the browse, nolabel command. The result will be similar to Figure 2.6 below: Figure 2.6 "],
["saving-our-data-set.html", "Module 6 Saving our data set", " Module 6 Saving our data set When we work in Stata, all commands and executions are saved in memory. Nevertheless, it is necessary that we save our work as a file, and this is what we will be doing in this module. For our data set, this means that even though all the work we have done so far is stored in Stata’s memory, it is necessary that we save a file copy of our work. By the end of the module, we: should become familiar with basic requirements and processes for saving work activities in Stata be able to save a file in Stata for both forward and backward compatibility situations To save the work we done so far in Stata, - we first click on File at the top left corner on the toolbar, - then select Save as…. Doing this will open a dialog box where we can choose where we would like to save our file. Once the data have been saved to a file, Stata will give the file the .dta extension even if we do not specify one. This extension identifies the file as a Stata dataset. We can give it any first name we want, but it is important that we not change the extension (.dta). Now, Let us try to save our data set: Go to the menu on the top left corner and select File In the dialog box that pops up select Save as… A dialog will open that is similar to the one below: Figure 2.8 We specify a directory in which we wish to save our file We then click the Filename field box near the bottom of the window, and give any file name we wish - let us choose term_proj as name for our dataset. Note: We can delete the .dta extension already in the field box as long as we leave the next field box Save as type just as it is. Finally, we click Save to save the file and return to the main Stata screen. It is worth noting that only one dataset can be opened in Stata at a time. When we open a new dataset, Stata first clears the current one from memory. Stata is designed to automatically detect when changes are made to datasets and will issue a prompt to save changes before exiting the application or replacing the current dataset. It is highly recommended, nevertheless, that we constantly save our work before closing Stata or opening a new data set. This is because Stata does not alert you to save data if the only changes made are to labels or notes. After saving the data, it is good practice to check to see whether everything we have listed in the dataset is indeed there. To do this: We move the cursor to the toolbox and select Data From the dialog box that pops up, we select Describe Then from the list, we select Describe data contents (codebook) A dialog will pop up that looks similar to the one below: Figure 2.9 In the dialog box, we can specify one of the variables in our data set, or if we want to see every variable in the output, we leave the input field Variables:(leave empty for all) blank. Let us check the codebook for the variable tuition_hike to see whether everything is as we want. To do this, we type tuition_hike into the variable field in the dialog box and click OK, or Submit then OK. We should see an output similar to the one below: Figure 3.0. .codebook for variable tuition_hike The Stata version used in this tutorial is version 12. Given that Stata makes it possible for new versions to be able to read data files that were saved using older versions, the data set we just saved can be used in Stata versions 12 or later. Stata is backward compatible in this sense. Stata is not always forward compatible however. For example, if someone using an earlier version of Stata wanted to use our dataset, they would have to specifically save it to an older version of Stata for them to be able to use the dataset. This, unfortunately is only applicable to versions no earlier than 9. To make our data set forward compatible: We move our cursor to the toolbar and click File In the dialog box that pops up, we select Save as … Another dialog box appears that is similar to the one below Figure 3.1 In the Filename field box near the bottom, we select a name to give the file. Again, we choose the name term_proj In the Save as type field box below, we then click on the down arrow on the right and select the Stata 9/10 Data(.dta)* from the list. Figure 3.1 below shows the options we must select to make our file forward compatible for earlier versions of Stata: Figure 3.2. Last but not least, we click Save, to save our dataset and set it to be forward compartible for later Stata versions Creating a data set entails more than just numeric values, as we have seen in this tutorial. Sometimes, it requires incorporating several kinds of information including numeric data, variable names, and variable labels. In addition to the labeling, we can add notes in the dataset and in some cases, to variables, which can be a useful technique for documenting changes. We have now created our Stata dataset and saved it to a local drive. Normally, after work is completed in Stata, we close the program by going to the menu at the top left corner, and clicking File, then Exit. Let us do that. "],
["summary.html", "Module 7 Summary 7.1 References", " Module 7 Summary In this tutorial we have covered several topics related to creating datasets with the Stata statistical software package. Specifically, We explored how to create a codebook from a questionnaire We also examined how to develop a coding schema and create a codesheet for our data We have also gone over how to manually input data into a Stata dataset Again, we learned how to add variable names and variable labels to our dataset Finally, we learned how to save our Stata dataset, and make them backward and forward compatible for use by earlier and later versions of Stata. 7.1 References Acock, A. C. (2012). A Gentle Introduction to Stata. StataCorp LP. Baum, F. C. (2011). Introduction to Stata. Boston College. retrieved from: http://fmwww.bc.edu/gstat/docs/StataIntro.pdf Rodriguez, G. (n.d.). Stata Tutorial. Princeton University. retrieved from:https://data.princeton.edu/stata/ Stata Corporation. (2003). Stata base reference manual. College Station, TX: Stata Corp. Torres-Reyna, O. (2007) Getting Starrted in Data Analysis with Stata. Princeton University. retrieved from: https://www.princeton.edu/~otorres/StataTutorial.pdf "]
]
